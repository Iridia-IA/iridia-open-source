services:
    postgres_db_flowise:
        image: postgres:16-alpine
        container_name: postgres_db_flowise
        env_file: "./postgres_flowise.env"
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
          interval: 10s
          timeout: 5s
          retries: 5
        ports: 
          - "5432:5432"
        networks:
          - stack_core_network
        volumes:
          - postgres_flowise_volume:${DB_VOLUME_PATH:-/var/lib/postgresql/data}
        restart: unless-stopped

    postgres_db_langfuse:
        image: postgres:16-alpine
        container_name: postgres_db_langfuse
        env_file: "./postgres_langfuse.env"
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB_LANGFUSE -p 5433"]
          interval: 10s
          timeout: 5s
          retries: 5
        ports: 
          - "5433:5433"
        networks:
          - stack_core_network
        volumes:
          - postgres_langfuse_volume:${DB_VOLUME_PATH:-/var/lib/postgresql/data}
        restart: unless-stopped
        command: -p 5433

    minio_bucket:
        image: docker.io/bitnami/minio:2024
        container_name: minio_bucket
        env_file: "./minio.env"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
          interval: 10s
          timeout: 5s
          retries: 3
        ports:
          - "9000:9000"
          - "9001:9001"
        networks:
          - stack_core_network
        volumes:
          - "./volumes/minio:/data"

    flowise:
        image: flowiseai/flowise:1.8.2
        container_name: flowise
        env_file: "./.env"
        hostname: flowise
        healthcheck:
          test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
          interval: 10s
          timeout: 5s
          retries: 5
        ports:
            - "3000:3000"
        volumes:
            - flowise_volume:${VOLUME_PATH}
        entrypoint: /bin/sh -c "sleep 3; flowise start"
        restart: always
        networks:
            - stack_core_network
        depends_on:
          postgres_db_flowise:
            condition: service_healthy
          minio_bucket:
            condition: service_healthy

    qdrant:
        image: qdrant/qdrant:latest
        restart: always
        container_name: qdrant_vectorstore
        ports:
          - "6333:6333"
          - "6334:6334"
        expose:
          - "6333"
          - "6334"
          - "6335"
        configs:
          - source: qdrant_config
            target: /qdrant/config/production.yaml
        networks:
            - stack_core_network
        volumes:
          - "./volumes/qdrant:/qdrant/storage"
        depends_on:
          postgres_db_flowise:
            condition: service_healthy
          minio_bucket:
            condition: service_healthy
          flowise:
            condition: service_healthy

    langfuse:
        image: langfuse/langfuse:2
        container_name: langfuse
        env_file: "./langfuse.env"
        healthcheck:
          test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${PORT}"]
          interval: 10s
          timeout: 5s
          retries: 5
        depends_on:
          postgres_db_langfuse:
            condition: service_healthy
          minio_bucket:
            condition: service_healthy
          flowise:
            condition: service_healthy
        ports:
          - "3004:3004"
        networks:
            - stack_core_network 

volumes:
  postgres_flowise_volume: 
  postgres_langfuse_volume:
  flowise_volume:
  # minio_volume:
  qdrant_data:

networks:
    stack_core_network:
        driver: bridge

configs:
  qdrant_config:
    content: |
      log_level: INFO